global(VERSION_saker.jar) = "0.8.4"

global(saker.jar_DEPENDENCIES) = [
	saker.zip,
]

static(VERSION_saker.build) = nest.dependency.resolve(
	saker.build,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]
static(VERSION_saker.nest) = nest.dependency.resolve(
	saker.nest,
	Filters: nest.dependency.filter.kind([]),
)[Bundles][0][BundleIdentifier][VersionNumber]

compile(
	out javac,
){
	$javac = saker.java.compile(
		SourceDirectories: [
			src/main/,
		],
		ClassPath: [
			saker.java.classpath.bundle([
				"saker.build-api-v{ static(VERSION_saker.build) }",
				"saker.nest-api-v{ static(VERSION_saker.nest) }"
			]),
			saker.java.classpath.bundle(nest.dependency.resolve(
				Bundles: global(saker.jar_DEPENDENCIES),
				Filters: nest.dependency.filter.compile(CompileTransitive: false)
			)),
		],
		Identifier: saker.jar,
		SourceVersion: 8,
		TargetVersion: 8,
		Parameters: [--release, 8]
	)
}
export(
	out compile = include(compile),
	out jar,
	out sourcejar,
	
	out bundlepaths = [
		$jar[Path],
		$sourcejar[Path],
	]
){
	$jar = saker.jar.create(
		Output: saker.jar.jar,
		Resources: [
			{
				Directory: resources,
				Resources: **,
			},
			{
				Directory: $compile[javac][ClassDirectory],
				Resources: **,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Identifier: "saker.jar-v{ global(VERSION_saker.jar) }",
				Nest-Bundle-Source: "saker.jar-sources-v{ global(VERSION_saker.jar) }",
			},
		},
	)
	$sourcejar = saker.jar.create(
		Output: saker.jar-sources.jar,
		Resources: [
			{
				Directory: src/main/,
				Resources: **/*.java,
			},
			{
				Files: LICENSE,
				TargetDirectory: META-INF,
			},
		],
		Manifest: {
			MainAttributes: {
				Nest-Bundle-Format-Version: 1,
				Nest-Bundle-Identifier: "saker.jar-sources-v{ global(VERSION_saker.jar) }",
			},
		},
	)
}
install(
	out export = include(export)
){
		nest.local.install($export[bundlepaths])
}
upload(){
	$export = include(export, Path: saker.build)
	include(Path: secret/secrets.build)
	nest.server.upload(
		Bundles: $export[bundlepaths],
		APIKey: global(saker.jar.UPLOAD_API_KEY),
		APISecret: global(saker.jar.UPLOAD_API_SECRET),
		Overwrite: true,
	)
}
test(){
	$export = include(export)
	$jar = $export[jar]
	
	$instrumentedjar = nest.test.instrument(
		nest.bundle.download("saker.build-test-v{ static(VERSION_saker.build) }")[BundlePaths][0],
		NestVersion: static(VERSION_saker.nest),
	)
	
	$jarpath = $jar[Path]
	$testcompile = saker.java.compile(
		SourceDirectories: src/test/,
		ClassPath: [
			$instrumentedjar,
			saker.java.classpath.bundle([
				"saker.build-test-runner-v{ static(VERSION_saker.build) }",
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}"
			]),
		],
		Identifier: saker.jar.tests,
	)
	$resolveddependencies = nest.dependency.resolve(
		Bundles: global(saker.jar_DEPENDENCIES),
		Filters: nest.dependency.filter.kind(classpath)
	)
	
	$test = saker.java.test(
		TestRunnerClassPath: [
			saker.java.classpath.bundle("saker.build-test-runner-v{ static(VERSION_saker.build) }"),
		],
		ClassPath: [
			$instrumentedjar,
		],
		DependencyClassPath: [
			$export[compile][javac],
		],
		TestInvokerClass: testing.saker.SakerJavaTestingInvoker,
		TestClassPath:	[
			$testcompile[ClassDirectory],
			saker.java.classpath.bundle([
				"saker.build-test-utils-v{ static(VERSION_saker.build) }",
				"saker.nest-test-utils-v{ static(VERSION_saker.nest )}",
			]),
		],
		TestClasses: [
			testing.saker.tests.**.*Test
		],
		NonDeterministicTests: [
			**,
		],
		TestClassParameters: {
			**: {
				RepositoryJarPath: nest.bundle.localize("saker.nest-test-v{ static(VERSION_saker.nest) }")[BundleLocalPaths][0],
				RepositoryParameterBundles: "{
						foreach $path in $export[bundlepaths]: "{ std.file.mirror($path) };" 
					};{ 
						foreach $path in nest.bundle.localize($resolveddependencies)[BundleLocalPaths]: ";{ $path }"
					}",
			}
		},
		TestInvokerParameters: {
			SakerJarPath: std.file.mirror($instrumentedjar),
			TimeoutMillis: 120000,
			TestsBaseBuildDirectory: std.file.mirror.path(std.file.place(test/build)),
		},
		IgnoreFileChanges: [
			std.file.place(test/build),
		] + $export[bundlepaths],
		MaxJVMCount: 1,
		FailFast: true,
		AbortOnFail: true,
		Verbose: true,
	)
}